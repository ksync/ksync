version: 2
jobs:
  build:
    resource_class: large
    docker:
      - image: circleci/golang:latest
        environment:
          DEBUG: true

    working_directory: /go/src/github.com/vapor-ware/ksync

    environment:
        TEST_DIRECTORY: "gotest"
        BINARY_NAME: "ksync"
        CLUSTER_NAME: "tim-dev"
        CLUSTER_ZONE: "us-central1-b"

    steps:
      - setup_remote_docker:
          docker_layer_caching: true

      - checkout

      - restore_cache:
          keys:
            - vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
            - vendor-{{ checksum "Gopkg.toml" }}

      - run:
          name: "Make test report directory"
          command: mkdir -p /tmp/$TEST_DIRECTORY

      - run:
          name: "Installing Vendored Dependencies"
          command: |
            go get -v github.com/golang/dep/cmd/dep
            go install github.com/golang/dep/cmd/dep
            dep ensure -v --vendor-only

      - run:
          name: "Getting builder"
          command: |
            go get -v github.com/mitchellh/gox

      - run:
          name: "Building docker binary"
          command: |
            make build-ci OPTS='-osarch="linux/amd64"'

      - run:
          name: "Building Radar Docker Container"
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            make docker-binary docker-build docker-push

      - run:
          name: "Install and setup GKE access"
          command: |
             curl https://sdk.cloud.google.com -o /tmp/gcloud-install
             chmod +x /tmp/gcloud-install
             /tmp/gcloud-install --disable-prompts
             echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
             /home/circleci/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
             /home/circleci/google-cloud-sdk/bin/gcloud components install kubectl --quiet
             /home/circleci/google-cloud-sdk/bin/gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE

      - run:
          name: "Initialize the cluster"
          command: |
            testdata/ci/setup.sh

      - run:
          name: "Lint"
          command: |
            make lint

      - run:
          name: "Launch Required Objects Into Cluster"
          command: |
            testdata/ci/launch.sh

      - run:
          name: "Get test to junit xml parser"
          command: |
            go get -v -u github.com/jstemmer/go-junit-report

      - run:
          name: "Running Tests"
          command: |
            make ci-test

      - run:
          name: "Building"
          command: |
            make build-ci OPTS='-os="!netbsd !freebsd !openbsd" -arch="amd64"'

      - save_cache:
          when: on_success
          key: vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor/

      - persist_to_workspace:
          root: .
          paths:
            - bin

      - store_artifacts:
          path: bin
          destination: binaries

      - store_test_results:
          path: /tmp/gotest

  release:
    working_directory: /go/src/github.com/vapor-ware/ksync
    docker:
      - image: circleci/golang:latest

    environment:
        BINARY_NAME: "ksync"

    steps:
      - checkout

      - setup_remote_docker

      - attach_workspace:
          at: .

      - run:
          name: "Getting Distributor"
          command: |
            go get -v github.com/tcnksm/ghr

      - run:
          name: "Generate Changelog"
          command: |
            docker pull timfallmk/github-changelog-generator
            docker run --name changelog timfallmk/github-changelog-generator \
              -u vapor-ware \
              -p ${BINARY_NAME} \
              --since-tag $(git describe --abbrev=0 --tags `git rev-list --tags --skip=1 --max-count=1`) \
              -t ${GITHUB_TOKEN}
            docker cp changelog:/usr/local/src/your-app/CHANGELOG.md ./

      - run:
          name: "Tag for release"
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
            make docker-tag-release

      - run:
          name: "Checking for Release"
          command: testdata/ci/release.sh

      - run:
          name: "Upload Binaries to Slack"
          command: |
            for DISTRO in linux darwin
            do
              curl -F file=@bin/${BINARY_NAME}_${DISTRO}_amd64 -F channels=${SLACK_CHANNEL} -F token=${SLACK_TOKEN} -F filename=${BINARY_NAME} -F filetype=binary -F title="${BINARY_NAME} ${CIRCLE_TAG} ${DISTRO}" https://slack.com/api/files.upload
            done

workflows:
  version: 2

  release:
    jobs:
      - build:
          context: org-global
          filters:
            tags:
              only: /.*/

      - release:
          requires:
            - build
          context: org-global
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]*(\.[0-9]*)*(-(\S)*)?$/

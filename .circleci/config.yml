version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:latest
        environment:
          DEBUG: true

    working_directory: /go/src/github.com/vapor-ware/ksync

    environment:
        TEST_DIRECTORY: "gotest"
        BINARY_NAME: "ksync"
        CLUSTER_NAME: "tim-dev"
        CLUSTER_ZONE: "us-central1-b"

    steps:
      - setup_remote_docker

      - checkout

      - restore_cache:
          keys:
            - vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
            - vendor-{{ checksum "Gopkg.toml" }}

      - run:
          name: "Make test report directory"
          command: mkdir -p /tmp/$TEST_DIRECTORY

      - run:
          name: "Install and setup GKE access"
          background: true
          command: |
             curl https://sdk.cloud.google.com -o /tmp/gcloud-install
             chmod +x /tmp/gcloud-install
             /tmp/gcloud-install --disable-prompts
             echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
             /home/circleci/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
             /home/circleci/google-cloud-sdk/bin/gcloud components install kubectl --quiet
             /home/circleci/google-cloud-sdk/bin/gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_ZONE
             testdata/ci/setup.sh

      - run:
          name: "Installing Vendored Dependencies"
          command: |
            go get -v github.com/golang/dep/cmd/dep
            go install github.com/golang/dep/cmd/dep
            dep ensure -v --vendor-only

      - run:
          name: "Lint"
          command: |
            go get -u github.com/alecthomas/gometalinter
            gometalinter --install
            gometalinter ./... --vendor --skip "testdata" \
            --tests --sort=severity --aggregate \
            --disable=megacheck --deadline=240s
            gometalinter ./... --vendor --skip "testdata" \
            --tests --sort=severity --aggregate \
            --disable-all --enable=megacheck --deadline=240s

      - run:
          name: "Launch Required Objects Into Cluster"
          command: |
            testdata/ci/launch.sh
            cat testdata/build/stamps.sh >> $BASH_ENV

      - run:
          name: "Get test to junit xml parser"
          command: go get -v -u github.com/jstemmer/go-junit-report

      - run:
          name: "Running Tests (Background)"
          background: true
          command: |
            go test -v ./... 2>&1 | go-junit-report > /tmp/$TEST_DIRECTORY/report.xml

      - run:
          name: "Running Tests"
          command: |
            go test -v ./...

      - save_cache:
          when: on_success
          key: vendor-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor/

      - run:
          name: "Getting builder"
          command: |
            go get -v github.com/mitchellh/gox

      - run:
          name: "Building"
          command: |
            gox --ldflags "${LDFLAGS}" --parallel=10 --output="bin/{{ .Dir }}_{{ .OS }}_{{ .Arch }}" -os='!netbsd' ./cmd/...

      - run:
          name: "Building Radar Docker Container"
          command: |
            make docker-build docker-push

      - persist_to_workspace:
          root: .
          paths:
            - bin

      - store_artifacts:
          path: bin
          destination: binaries

      - store_test_results:
          path: /tmp/gotest

  release:
    working_directory: /go/src/github.com/vapor-ware/ksync
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - attach_workspace:
          at: .

      - run:
          name: "Getting builder"
          command: |
            go get -v github.com/tcnksm/ghr

      - run:
          name: "Checking for Release"
          command: testdata/ci/release.sh
          when: on_success

workflows:
  version: 2

  release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - release:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]*(\.[0-9]*)*$/
